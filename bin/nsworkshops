#!/usr/bin/env node

var fs = require('fs'),
  childProcess = require('child_process'),
  program = require('commander'),
  workshops = require('../data/workshops.js'),
  checkNpm = require('../check-npm.js'),
  allInstallCommands = workshops.getInstallCommands(),
  installedList = checkNpm.installedList(allInstallCommands),
  notInstalledList = checkNpm.notInstalledList(allInstallCommands),
  VERSION = require('../package.json').version

program.version(VERSION)
  .command('list')
  .description('- By default, this command list all the workshops(installed + not installed ones)')
  .option('-i, --installed', 'Fetch only the installed workshops')
  .option('-n, --notinstalled', 'Fetch only not installed workshops')
  .action(function (options) {
    if (options.installed) {
      displayList(allInstallCommands, 'install', ['You have', 'nodeschool workshops installed'])
    }else if (options.notinstalled) {
      displayList(allInstallCommands, 'notinstall', ['You have', 'nodeschool workshops  not installed :'])
    } else {
      displayList(allInstallCommands, '', ['There are', 'nodeschool workshops  in total :'])
    }

  })

program
  .command('search <PATTERN>')
  .description('- PATTERN is the workshop name(or some characters from the workshop name),\n                             you should know that fuzzy search is used here. By default,\n                             this command search for both installed & not installed workshops,\n                             the returned result can be a workshop name or an array of workshop names')
  .option('-i, --installed', 'Fetch only the installed workshops')
  .option('-n, --notinstalled', 'Fetch only not installed workshops')
  .action(function (PATTERN, options) {
    var searchPattern = PATTERN,
      retrievedElements = checkNpm.search(searchPattern, workshops.getInstallCommands())
    if (options.installed) {
      displayList(retrievedElements, 'install', ['You have', 'nodeschool workshops installed'])
    }else if (options.notinstalled) {
      displayList(retrievedElements, 'notinstall', ['You have', 'nodeschool workshops not installed :'])
    } else {
      displayList(retrievedElements, '', ['There is', 'nodeschool workshops  in total :'])
    }

  })

program
  .command('install <PATTERN>')
  .description('- PATTERN is the workshop name(or some characters from the workshop(s) name) to install')
  .option('-n, --notinstalled', '- Install  the remaining  workshops')
  .action(function (PATTERN, options) {
    var installPattern = PATTERN
    var retrievedElements = checkNpm.search(PATTERN, workshops.getInstallCommands())
    retrievedElements = checkNpm.notInstalledList(retrievedElements)
    if (option.notinstalled) {
      // install all the remaining packages
      console.log('You are about to install the all the workshops that are not already installed:  ')
      console.log('---------------------------------------------------------------')
      console.log(display(notInstalledList))
      executeOperation('install', notInstalledList)
    }
    if (!retrievedElements.length) {
      console.log('Sorry, the workshop/s(' + PATTERN + ") doesnt/don't exist")
    } else {
      console.log('You are about to install the following ' + retrievedElements.length + ' workshops:')
      console.log('---------------------------------------------------------------')
      console.log(display(retrievedElements))
      executeOperation('install', retrievedElements)
    }
  })

program
  .command('remove <PATTERN>')
  .description('- PATTERN is the workshop name(or some characters from the workshop(s) name) to remove')
  .option('-i, --installed', 'Remove all the installed workshops')
  .action(function (PATTERN, options) {
    var removePattern = PATTERN
    var retrievedElements = checkNpm.search(PATTERN, workshops.getInstallCommands())
    retrievedElements = checkNpm.notInstalledList(retrievedElements)
    if (option.installed) {
      // remove all the the installed workshops
      console.log('you are about to remove following ' + installedList.length + ' workshops:')
      console.log('---------------------------------------------------------------')
      console.log(display(installedList))
      executeOperation('remove', installedList)
    }
    if (!retrievedElements.length) {
      console.log('Sorry, the workshop/s(' + PATTERN + ") doesnt/don't exist")
    } else {
      console.log('You are about to remove the following ' + retrievedElements.length + ' workshops:')
      console.log('---------------------------------------------------------------')
      console.log(display(retrievedElements))
      executeOperation('remove', retrievedElements)
    }
  })

program.parse(process.argv)

function executeOperation (operation, moduleName) {
  var operation = (operation == 'install') ? 'install' : 'remove',
    command = 'sudo npm ' + operation + ' -g '

  if (typeof (moduleName) === 'string') {
    command += moduleName
  } else if ((typeof (moduleName) !== 'boolean') && (moduleName.length !== 0)) {
    command += moduleName.join(' ')
  }
  // we can add else here to display message when there is nothing to show

  handleInstallRemoveOutput(command)
}

function handleInstallRemoveOutput (command) {
  childProcess.exec(command, function (err, stdout, stderr) {
    if (err) {
      throw err
    }
    console.log(stdout)
  })
}

function display (list) {
  return list.map(function (item) {
    return '├──' + item
  }).join('\n')
}

function displayList (list, type, message) {
  var retrievedList = (type == '') ? list : checkNpm[(type == 'install') ? 'installedList' : 'notInstalledList'](list)
  console.log(message[0] + ' ' + retrievedList.length + ' ' + message[1])
  console.log('---------------------------------------------------------------')
  console.log(display(retrievedList) + '\n')
}
